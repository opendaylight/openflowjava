/*
 * Copyright (c) 2013 Pantheon Technologies s.r.o. and others. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

package org.opendaylight.openflowjava.protocol.impl.core;

import java.io.IOException;
import java.security.KeyStore;
import java.security.NoSuchAlgorithmException;
import java.security.Security;
import java.security.cert.CertificateException;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;

import org.opendaylight.openflowjava.protocol.api.connection.TlsConfiguration;
<<<<<<< HEAD
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
=======
>>>>>>> 5480b01... DO NOT MERGE: TLS support - initial code drop

/**
 * Class for setting up TLS connection.
 *
 * @author michal.polkorab
 */
public class SslContextFactory {

    // "TLS" - supports some version of TLS
    // Use "TLSv1", "TLSv1.1", "TLSv1.2" for specific TLS version
    private static final String PROTOCOL = "TLS";
    private String keystore;
    private String keystoreType;
    private String truststore;
    private String truststoreType;
<<<<<<< HEAD

    private static final Logger LOGGER = LoggerFactory.getLogger(SslContextFactory.class);

    /**
     * @param tlsConfig TLS configuration object, contains keystore locations
     *  + keystore types
     */
    public SslContextFactory(TlsConfiguration tlsConfig) {
        keystore = tlsConfig.getTlsKeystore();
        keystoreType = tlsConfig.getTlsKeystoreType();
        truststore = tlsConfig.getTlsTruststore();
        truststoreType = tlsConfig.getTlsTruststoreType();
    }

    /**
=======

    /**
     * @param tlsConfig TLS configuration object, contains keystore locations
     *  + keystore types
     */
    public SslContextFactory(TlsConfiguration tlsConfig) {
        keystore = tlsConfig.getTlsKeystore();
        keystoreType = tlsConfig.getTlsKeystoreType();
        truststore = tlsConfig.getTlsTruststore();
        truststoreType = tlsConfig.getTlsTruststoreType();
    }

    /**
>>>>>>> 5480b01... DO NOT MERGE: TLS support - initial code drop
     * @return servercontext
     */
    public SSLContext getServerContext() {
        String algorithm = Security.getProperty("ssl.KeyManagerFactory.algorithm");
        if (algorithm == null) {
            algorithm = "SunX509";
        }
        SSLContext serverContext;
        try {
            KeyStore ks = KeyStore.getInstance(keystoreType);
            ks.load(SslKeyStore.asInputStream(keystore),
                    SslKeyStore.getKeyStorePassword());
            KeyManagerFactory kmf = KeyManagerFactory.getInstance(algorithm);
            kmf.init(ks, SslKeyStore.getCertificatePassword());

            KeyStore ts = KeyStore.getInstance(truststoreType);
            ts.load(SslKeyStore.asInputStream(truststore),
                    SslKeyStore.getKeyStorePassword());
            TrustManagerFactory tmf = TrustManagerFactory.getInstance(algorithm);
            tmf.init(ts);

            serverContext = SSLContext.getInstance(PROTOCOL);
            serverContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
<<<<<<< HEAD
        }
        catch ( IOException e ) {
        	LOGGER.debug("IOException - ", e);
        	throw new Error(
                    "IOException. Failed to initialize the server-side SSLContext", e);
        }
        catch ( NoSuchAlgorithmException e ) {
        	LOGGER.debug("NoSuchAlgorithmException - ", e);
        	throw new Error(
                    "NoSuchAlgorithmException. Failed to initialize the server-side SSLContext", e);
        }
        catch ( CertificateException e ) {
        	LOGGER.debug("CertificateException - ", e);
        	throw new Error(
                    "CertificateException. Failed to initialize the server-side SSLContext", e);
        }
        catch (RuntimeException e) {
        	LOGGER.debug("IOException - ", e);
            throw new Error(
                    "RuntimeException. Failed to initialize the server-side SSLContext", e);
        } catch (Exception e) {
        	LOGGER.debug("Exception - ", e);
            throw new Error(
                    "Exception. Failed to initialize the server-side SSLContext", e);
        }
=======
        } catch (RuntimeException e) {
            throw new Error(
                    "Failed to initialize the server-side SSLContext", e);
        } catch (Exception e) {
            throw new Error(
                    "Failed to initialize the server-side SSLContext", e);
        }
>>>>>>> 5480b01... DO NOT MERGE: TLS support - initial code drop
        return serverContext;
    }
}